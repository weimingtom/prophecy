一、NetConnection.call轮询过程
取自Red5的echo_test例子（RTMP AMF0 Object）

创建连接->握手->连接和获取带宽->远程调用->断开连接

---------------------------------------------
   Client->Server         Server->Client
---------------------------------------------
1. C0握手包，长度0x601     S0握手包，长度0xC01
        首字节0x03              首字节0x03
---------------------------------------------
2. C1握手包，长度0x600
        首字节随机
---------------------------------------------
3. connect包（粘包）
        含AMF0数据 
        类型0x14(Invoke)     
        首字节0x02              
   
        子包（粘包）                                 类型0x06(Client BW)（恒等）
        首字节0xC3              首字节0x02
---------------------------------------------
4. 类型0x05(Server BW)     类型0x04(Ping)（恒等）
        首字节0x02              首字节0x42

                           _result包
                                                                        含AMF0数据
                                                                        类型0x14(Invoke)
                                                                        首字节0x03  
                           
                                                                        类型0x04(Bytes Read)（恒等）
                                                                        首字节0x42
---------------------------------------------
5. call包 
        含AMF0数据                                       含AMF0数据
        类型0x14(Invoke)         类型0x14(Invoke)
        首字节0x03               首字节0x43
---------------------------------------------
6. call包
        含AMF0数据                                       含AMF0数据
        类型0x14(Invoke)         类型0x14(Invoke)
        首字节0x43               首字节0x43
---------------------------------------------

	    
二、模型描述：
(1) 握手过程中，C0包长度0x601，首字节0x03，
S0包可以是随机内容的，
但需要保证首字节为0x03，长度为0xC01
(2) connect包和C1包内容粘起来
(3) AMF0数据中可能混有0xC?内容的字节（用于分割过长的数据），
出现在connect包的偏移位置0x8C处（内容为0xC3），
应该是为了保证AMF包包体长度总小于等于0x80。
(4) 客户端RTMP包首字节和包体长度
首字节决定包头长度。上面提到的客户端包的首字节有以下情况：
	* C0握手包的0x03：无包头，
		包体长度0x600
	* 非C0握手包的0x03：包头大小12，
		包体长度小于0x80，可能有0xC3的分割。
	* 随机内容：C1握手包。没有包头，
		包体长度0x601
	* 0xC3：包头大小1，用于表示connect包的子包，
		包体长度小于0x80，由前面的AMF包包头中的长度信息计算得到。
	* 0x02：包头大小12，
		包体长度小于0x80，可能有0xC3的分割。
	* 0x43：包头大小8
		包体长度小于0x80，可能有0xC3的分割。
(5)RTMP包首字节结构，长度1 Byte
	* 包头长度(2bit) | 频道ID(6bit)
		其中包头长度的计算包括首字节在内
    * 2bit内容和包头长度换算方法：
    	//00	12 bytes  0?
		//01	8 bytes   4?
		//10	4 bytes   8?
		//11	1 byte    C?
(6)RTMP包头结构（注意，包含首字节在内；包体总长的计算包括子包包体在内）
	* 包头长度1 Byte：
		首字节(1B)
	* 包头长度8 Bytes：
		首字节(1B) | 时间戳(3B) | 包体总长(3B) | 包类型(1B)
	* 包头长度12 Bytes：
		首字节(1B) | 时间戳(3B) | 包体总长(3B) | 包类型(1B) | 流ID(4B)
(7)包类型一览表
    //0x01	Chunk Size	changes the chunk size for packets
    //0x02	Unknown	
    //0x03	Bytes Read	send every x bytes read by both sides
    //0x04	Ping	ping is a stream control message, has subtypes
    //0x05	Server BW	the servers downstream bw
    //0x06	Client BW	the clients upstream bw 
    //0x07	Unknown	
    //0x08	Audio Data	packet containing audio
    //0x09	Video Data	packet containing video data
    //0x0A-0x0E	Unknown	
    //0x0F	FLEX_STREAM_SEND	TYPE_FLEX_STREAM_SEND
    //0x10	FLEX_SHARED_OBJECT	TYPE_FLEX_SHARED_OBJECT
    //0x11	FLEX_MESSAGE	TYPE_FLEX_MESSAGE
    //0x12	Notify	an invoke which does not expect a reply
    //0x13	Shared Object	has subtypes
    //0x14	Invoke	like remoting call, used for stream actions too.
    //0x16	StreamData	这是FMS3出来后新增的数据类型,这种类型数据中包含AudioData和VideoData
(8)服务器RTMP包首字节和包体长度
	* S0包长度0xC01，首字节0x03
	* call包的响应总返回0x43首字节
	    