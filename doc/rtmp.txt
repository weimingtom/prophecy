http://weibing1122.wordpress.com/2009/05/19/rtmp%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8C%85%E6%A0%BC%E5%BC%8F/

RTMP协议概述及包格式
Posted on May 19, 2009 by weibing1122
原文出处 http://www.openred5.com/bbs/viewthread.php?tid=188&extra=page%3D1

RTMP协议概述

介绍:

RTMP协议是被Flash用于对象,视频,音频的传输.该协议建立在TCP协议或者轮询HTTP协议之上.
RTMP协议就像一个用来装数据包的容器,这些数据可以是AMF格式的数据,也可以是FLV中的视/音频数据.
一个单一的连接可以通过不同的通道传输多路网络流.这些通道中的包都是按照固定大小的包传输的.

网络连接(Connection)

一个Actionscrīpt连接并播放一个流的简单代码:
CODE:
var videoInstance:Video = your_video_instance;
var nc:NetConnection = new NetConnection();
var connected:Boolean = nc.connect("rtmp:/localhost/myapp");
var ns:NetStream = new NetStream(nc);
videoInstance.attachVideo(ns);
ns.play("flvName");

默认端口为1935
握手

Client → Server :向服务器发出握手请求.这不属于协议包一部分,该握手请求第一个字节为(0×03),其后跟着1536个字节.经管看上去这部分的内容对于RTMP协议来说并不是至关重要的,但也不可随意对待.
Server → Client :服务器向客户端回应握手请求.这部分的数据仍然不属于RTMP协议的部分.该回应的其实字节仍然为(0×03),但是后边跟着个长度为1536个字节(一共为3072 )的包块.第一个1536块看上去似乎可以是任意内容,甚至好像可以是Null都没有关系.第二个1536的代码块,是上一步客户端向服务器端发送的握手请求的内容.
Client→Server:把上一步服务器向客户端回应的第二块1536个字节的数据块.

至此客户端与服务器端的握手结束,下面将发送RTMP协议的包内容.

Client → Server :向服务器发送连接包.
Server → Client :服务器回应.
… …. 等等… …

RTMP 数据类型


0×01	Chunk Size	changes the chunk size for packets
0×02	Unknown	anyone know this one?
0×03	Bytes Read	send every x bytes read by both sides
0×04	Ping	ping is a stream control message, has subtypes
0×05	Server BW	the servers downstream bw
0×06	Client BW	the clients upstream bw
0×07	Unknown	anyone know this one?
0×08	Audio Data	packet containing audio
0×09	Video Data	packet containing video data
0x0A – 0×11	Unknown	anyone know?
0×12	Notify	an invoke which does not expect a reply
0×13	Shared Object	has subtypes
0×14	Invoke	like remoting call, used for stream actions too.

Shared Object 数据类型


0×01	Connect
0×02	Disconnect
0×03	Set Attribute
0×04	Update Data
0×05	Update Attribute
0×06	Send Message
0×07	Status
0×08	Clear Data
0×09	Delete Data
0x0A	Delete Attribute
0x0B            	Initial Data

RTMP包结构

RTMP包 包含一个固定长度的包头和一个最长为128字节的包体.包头可以是下面4种长度的任意一种:12, 8, 4, or 1 byte(s).
第一个字节的前两个Bit很重要,它决定了包头的长度.它可以用掩码0xC0进行"与"计算.下面的表格罗列了可能的包头长度:
Bits	Header Length
00	12 bytes
01	8 bytes
10	4 bytes
11	1 byte
我们在这里讨论关RTMP包结构的问题并不是非常的详细.我们在以后有时间会讨论关于AMF的问题(敬请期待…),其实RTMP包结构就是使用了AMF格式.

流

关于流的操作我们需要进一步研究,在论坛中的http://www.openred5.com/bbs/viewthread.php?tid=175&extra=page%3D1这篇文章研究的还是不错的,大家可以参考.不过下面可以列一个关于客户端向服务器端发送流的流程:

Client→Server :发送一个创建流的请求.
Server→Client :返回一个表示流的索引号.
Client→Server :开始发送.
Client→Server :发送视音频数据包(这些包在同一个频道(channel)并用流的索引号来唯一标识).

今天配置FLex环境时，出现了这样一个问题，所以搜到这篇文章的。

[Flex] RTMP-Server on port: 2038 failed to start up.
java.net.BindException: Address already in use: bind
        at sun.nio.ch.Net.bind(Native Method)
        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:
119)
        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:59)
        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:52)
        at flex.messaging.endpoints.rtmp.BaseNIORTMPServer.run(BaseNIORTMPServer
.java:155)
        at java.lang.Thread.run(Thread.java:595)

Exception in thread "RTMP-Server" flex.messaging.endpoints.rtmp.RTMPException: T
he RTMP server has encountered a fatal exception starting up: Address already in
 use: bind
        at flex.messaging.endpoints.rtmp.BaseNIORTMPServer.run(BaseNIORTMPServer
.java:317)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.net.BindException: Address already in use: bind
        at sun.nio.ch.Net.bind(Native Method)
        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:
119)
        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:59)
        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:52)
        at flex.messaging.endpoints.rtmp.BaseNIORTMPServer.run(BaseNIORTMPServer
.java:155)
        … 1 more
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
http://blog.csdn.net/chenyanxu/archive/2009/09/02/4511087.aspx


     RTMP 协议研究

1 协议研究概述
   协议设计和分析一直都是在工作遇到，正好在这里总结一下，说到协议，在这个网络的时代，没有人可以离开它了。他存在我们生活中的任何角落，只不过我们平时，并没有注意到它的存在，可以这么说如果没有协议，我们生活和日常的工作生产都不能进行。如果仔细想想你生活中用到的所有东西，协议已经包含其中。那到底什么是协议呢？说的简单一点就是双方达成的共识，以便更好的交流，理论上协议是什么呢？如果学过《信号与系统》的人都知道有个简单的道理，就是信息在经过一个管道的符号集，到另一个符号集时信息不会丢失。

    任何复杂的事物都有个最简单的本质，网络上的协议也是这样，有个最基本的本质。除去上下层的概念，协议就只剩下通信双方实体的规则。

   一般的协议都包含最基本的协议头，不管是物理层、链路层、还是网络层，这个头就构成了协议的本质东西。通常协议头要包含以下最基本的三项信息：

双方实体的唯一标示，用来标示通信双方的实体。
类型描述或者是净核描述，标志净核的内容。
协议净核的长度，用来在萃取净核的内容应用。
   其中，前两项是必须要有的，没有他们，通信双方的交互根本得不到保证，第三项在不太灵活的通信中可以去掉，而有第二项的类型推出。

    协议的丰富性，有净核的多样性体现。

   协议头除了以上的三项，还可以增加更多的信息（比如控制信息、时间信息等），取决于具体的应用。找到这些基本的东西，再去看协议的时候，能够更好的抓住协议的主体进行分析和设计了。

             如图   协议物理结构

2 RTMP 协议概述
   RTMP 协议是被 Flash 用于对象、视频、音频的传输。该协议建立在 TCP 协议或者轮询 HTTP 协议之上， RTMP 协议就像一个用来装数据包的容器，这些数据可以是 AMF 格式的数据，也可以是 FLV 中的视 / 音频数据。一个单一的连接可以通过不同的通道传输多路网络流，这些通道中的包都是按照固定大小的包传输的 .

3 RTMP 协议部分
3.1 协议头
struct RTMP_HEAD

{

          char cChannelid : 6;// 第一个字节的后 6 位

          char cCheadsize ; // 第一个字节的头两位

      char cTimer[3];  // 三个字节表示的时间信息

      char cLength[3]; // 三个字节表示的长度

      char cDatatype; // 数据类型

      char sStreamid[4]; // 流标识

};

这里有三个最基本的元素（唯一标示 ）、（类型 ）和（净核的长度 ）分别是： cChannelid 、 cDatatype 和 cLength 。

3.2 数据类型
数据类型 决定了协议上层可以做的具体的事情，和使用协议的人必须遵循的规则。

同时数据类型 说明了净核 的基本内容。

RTMP 数据类型：

0×01	Chunk Size	changes the chunk size for packets
0×02	Unknown	anyone know this one?
0×03	Bytes Read	send every x bytes read by both sides
0×04	Ping	ping is a stream control message, has subtypes
0×05	Server BW	the servers downstream bw
0×06	Client BW	the clients upstream bw
0×07	Unknown	anyone know this one?
0×08	Audio Data	packet containing audio
0×09	Video Data	packet containing video data
0x0A - 0×11	Unknown	anyone know?
0×12	Notify	an invoke which does not expect a reply
0×13	Shared Object	has subtypes
0×14	Invoke	like remoting call, used for stream actions too.
3.3 协议的净核
   RTMP 的协议净核是用 AMF 格式来描述， AMF 格式本身的产生就是为了 RTMP 协议服务的，最初的 RTMP 采用 XML 的形式传输数据，但 XML 只是字符形式的值对的格式传输数据，而随着应用的普及这完全不能满足要求了，比如对象、结构、数组，甚至可以是数据集，配合 DataGrid 组件可以很方便地显示数据。 
为了处理复杂数据类型，采用一种独有的方式使 Flash 与应用服务器间可以来回传送数据势在必行。于是 AMF 应运而生。

AMF 是 Adobe 独家开发出来的通信协议，它采用二进制压缩，序列化、反序列化、传输数据，从而为 Flash 播放器与 Flash Remoting 网关通信提供了一种轻量级的、高效能的通信方式。如下图所示。 
   
AMF 最大的特色在于可直接将 Flash 内置对象，例如 Object, Array, Date, XML ，传回服务器端，并且在服务器端自动进行解析成适当的对象，这就减轻了开发人员繁复工作，同时也更省了开发时间。由于 AMF 采用二进制编码，这种方式可以高度压缩数据，因此非常适合用 来传递大量的资料。数据量越大， Flash Remoting 的传输效能就越高，远远超过 Web Service 。至于 XML, LoadVars 和 loadVariables() ，它们使用纯文本的传输方式，效能就更不能与 Flash Remoting 相提并论了。 
注意： Flash Remoting 需要浏览器支持 Binary POST ， Flash 播放器在 Netscape 6.x. 环境下运行 Flash Remoting 会不起作用（ Flash Remoting 调用没有效果也不返回错误）， Netscape 7 已经纠正了这个 bug 。对于早期 Safari 和 Chimera 版的苹果机也有这个问题。 
同样是轻量级数据交换协议，同样是通过调用远程服务，同样是基于标准的 HTTP 和 HTTPS 协议， Flash Remoting 为什么选择了使用 AMF 而放弃了 SOAP 与 Flash 播放器通信呢  有如下原因： 
 
SOAP 将数据处理成 XML 格式，相对于二进制的 AFM 太冗长了；  
AMF 能更有效序列化数据；因为 AMF 的初衷只是为了支持 Flash ActionScript 的数据类型，而 SOAP 却致力于提供更广泛的用途；  
AMF 支持 Flash 播放器 6 只需要浏览器增加 4 KB 左右（压缩后）的大小，而 SOAP 就大多了；  
SOAP 的一些头部文件请求在 Flash 播放器 6 不支持。那 Flash 播放器 6 为什么能访问基于 SOAP 的 Web 服务呢？原来 Flash Remoting 网关将 SOAP 请求在服务器端与转换成 AFM 格式，然后利用 AFM 与 Flash 播放器通信。另外， AMF 包中包含 onResult 事件（比如说 response 事件）和 onStatus 事件（比如说 error 事件），这些事件对象在 Flash 中可以直接使用。  
AMF 从 Flash MX 时代的 AMF0 发展到现在的 AMF3 。 AMF3 用作 Flash Playe 9 的 ActionScript 3.0 的默认序列化格式，而 AMF0 则用作旧版的 ActionScript 1.0 和 2.0 的序列化格式。 在网络传输数据方面， AMF3 比 AMF0 更有效率。 AMF3 能将 int 和 uint 对象作为整数（ integer ）传输，并且能序列化 ActionScript 3.0 才支持的数据类型 , 比如 ByteArray ， XML 和 Iexternalizable 。

      AMF 很好的解决了内容的丰富性。（具体 AMF 格式参考附件格式文档）

3.3.1 AMF中的数据类型Data Types
AMF0 supports the following data types (with their type field values):

NUMBER = 0x00
BOOLEAN = 0x01
STRING = 0x02
OBJECT = 0x03
MOVIECLIP = 0x04
NULL_VALUE = 0x05
UNDEFINED = 0x06
REFERENCE = 0x07
ECMA_ARRAY = 0x08
OBJECT_END = 0x09
STRICT_ARRAY = 0x0a
DATE = 0x0b
LONG_STRING = 0x0c
UNSUPPORTED = 0x0d
RECORD_SET = 0x0e
XML_OBJECT = 0x0f
TYPED_OBJECT = 0x10
Binary Format
AMF format for a value/object consists of a type byte (see above) followed by zero or more bytes. This section describes the bytes following the type byte for various types.

NUMBER (type byte: 0x00)
Numbers are stored as 8 byte (big endian) float double. On x86 you can just byteswap a double to encode it correctly.

BOOLEAN (type byte: 0x01)
A boolean is encoded in one byte. FIXME: is true sent as 0xff? 0x01?

STRING (type byte: 0x02)
A string is encoded as a 2 byte (big endian) count (number of bytes) followed by that many bytes of text. Note: there is no null terminator.

I think the text is assumed to be UTF-8. Can someone double check me on this?

NULL_VALUE (type byte: 0x05)
A null has zero bytes following the type byte

UNDEFINED (type byte: 0x06)
A undefined has zero bytes following the type byte

OBJECT (type byte: 0x08)
An object is encoded as a series of key/value pairs. The key is encoded as a STRING (above) WITH NO TYPE BYTE, and the value is any AMF value.

The object encoding is terminated by 0x000009 (that is a zero length string key, followed by the OBJECT_END type byte described below.

OBJECT_END (type byte: 0x09)
This is not really a value, but a marker for the end of an OBJECT. See above.

STRICT_ARRAY (type byte: 0x0a)
This is the encoding for arrays such as ["foo", "bar", 1, 2, 3]. For a hash (a set of key/value pairs) you'll need to use OBJECT above.

An array is encoded as 4 byte (big endian) integer which is the number of elements in the array, followed by that many AMF values.

That's it. There's no terminator of any kind.

Use in shared object files
While most AMF objects are just a value, there is a special variation used by shared object files for properties. Rather than start with the type field, followed by the length, it starts with a byte count, then the name, and then the regular AMF type field, the length, and then the data.

3.4 客户端和服务器的连接过程
3.4.1客户和服务器的握手
 

   Flash Player 以系统时间作为种子通过某种算法生成的数字签名，大小是 1537 字节向服务器发起第一次握手，服务器根据客户端的数字签名产生一个 3073 字节的验证包，给客户端，客户端在接受到服务器的回应以后会发送一个 1536 字节的回复。

具体的流程：

发送第一次握手包 handshark1
接收第二次握手包 handshark2
发送的三次握手包 handshark3
第一个握手包 handshark1 和服务器的回复握手包 handshark2 都是以 0X03 开头。这三次握手不是 RTMP 协议本身的内容，所以在这并没有包含 RTMP  的协议头。是服务器的厂家自己产品做验证用的，严格的说就是你必须用  Adobe 的客户端和服务器才能使用我的协议。

3.4.2客户和服务器通信
   具体连接和请求视频的过程

发送 rtmp_connect 命令
. 发送本地带宽消息 . 默认是 125000
服务器返回服务器带宽信息
服务器返回本地带宽信息
服务器返回连接成功消息 "NetConnection.Connect.Success"
客户端发送创建流请求 encodeCreateStreamPacket
服务器返回创建流成功消息
客户端发送播放文件消息 Rtmp_Play
服务器返回 TYPE_CHUNK_SIZE 消息
服务器返回开始播放消息 "NetStream.Play.Start"
服务器返回视频信息 (TYPE_STREAM_METADATA) ，包括大小，宽高，速率等等信息－－文件长度可以在这里推算出来
RTMP 的净核决定了内容服务， adobe 的服务器采用的 AMF 格式的字串命令来控制视频的传输和播放，具体的字串命令信息如下：（注：字串的定义有厂家（ adobe ）自己定义，只要满足 AMF 的格式就可以）

 
 
NetConnection.Call.Failed
NetConnection.Call.BadVersion 
NetConnection.Connect.AppShutdown
NetConnection.Connect.Closed
NetConnection.Connect.Rejected
NetConnection.Connect.Success
NetStream.Clear.Success
NetStream.Clear.Failed
NetStream.Publish.Start
NetStream.Publish.BadName
NetStream.Failed
NetStream.Unpublish.Success
NetStream.Record.Start
NetStream.Record.NoAccess
NetStream.Record.Stop
NetStream.Record.Failed
NetStream.Play.InsufficientBW
NetStream.Play.Start
NetStream.Play.StreamNotFound
NetStream.Play.Stop
NetStream.Play.Failed
NetStream.Play.Reset
NetStream.Play.PublishNotify
NetStream.Play.UnpublishNotify
NetStream.Data.Start
Application.Script.Error
Application.Script.Warning
Application.Resource.LowMemory
Application.Shutdown
Application.GC
Play
Pause
demoService.getListOfAvailableFLVs
getStreamLength
connect
app
flashVer
swfUrl
tcUrl
fpad
capabilities
audioCodecs
audioCodecs
videoCodecs
videoFunction
pageUrl
createStream
deleteStream
duration
framerate
audiocodecid
audiodatarate
videocodecid
videodatarate
height
width
3.4.2数据的萃取
      在服务器返回开始播放消息 "NetStream.Play.Start" 之后，服务器就会开始给客户端传输数据了，一般数据的萃取都是先解析协议的头，然后根据协议头中数据类型和净核长度就可以把数据部分取出， RTMP 协议也是这样。

struct RTMP_HEAD

{

          char cChannelid : 6;// 第一个字节的后 6 位

          char cCheadsize ; // 第一个字节的头两位

      char cTimer[3];  // 三个字节表示的时间信息

      char cLength[3]; // 三个字节表示的长度

      char cDatatype; // 数据类型

      char sStreamid[4]; // 流标识

}

      首先判断 cDatatype 是那种类型，然后根据不同的类型进行萃取数据部分，进行不同的处理，获取视频的数据的方式先看是否是一下的类型：

0×08	Audio Data	packet containing audio
0×09	Video Data	packet containing video data
 
根据净核的长度读取出内存中的音视频数据，这里的音视频数据是有一定编码格式的数据，这个取决于应用的具体配置， Flash play 使用的是 FLV 的格式。要对这部分数据进行存取，还有做一部分工作，对 FLV 的视频数据进行去壳，取出数据保存文件就可以了。
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
http://hi.baidu.com/cjmxp/blog/item/1fee3aade5fa47014b36d653.html



Rtmp握手部分C++代码
2009年03月20日 星期五 18:58
Rtmp握手部分代码不长,先附在这里了,可以连接到FM2 FMS3 Red5 附件采用vc6.0编译
/************************************************************************
/* 
Rtmp握手的程序
作者：fly2700@163.com                                                    
/************************************************************************/

#include <stdio.h>
#include <winsock.h>
#pragma comment(lib,"Wsock32.lib")
#define HANDSHAKE_SIZE   1536
#define NO_FLAGS_SET 0
unsigned int g_socket; 

BOOL Connect(const char* address, const char* strApp, UINT port)
{
WSADATA Data;
SOCKADDR_IN destSockAddr;
unsigned long destAddr;
int status;

printf("Open in Win32.");

status = WSAStartup(MAKEWORD(1, 1), &Data);
if (status != 0)
printf( "ERROR: WSAStartup unsuccessful.\n");
destAddr = inet_addr(address);
memcpy(&destSockAddr.sin_addr,&destAddr, sizeof(destAddr));
destSockAddr.sin_port=htons(port);
destSockAddr.sin_family=AF_INET;
g_socket=socket(AF_INET, SOCK_STREAM, 0); 
if (g_socket == INVALID_SOCKET)
{
printf("ERROR: socket unsuccessful\n");
status = WSACleanup();
if (status == SOCKET_ERROR)
printf("ERROR: WSACleanup unsuccessful\n");
return FALSE;
} 
printf("Trying to connect to ip:%s\n",address);
status = connect(g_socket,(LPSOCKADDR) &destSockAddr, sizeof(destSockAddr)); 
if (status == SOCKET_ERROR)
{
printf("Connect Failue.\n");
return FALSE;
}
return TRUE;
}

BOOL Handshake()
{
char strSend[HANDSHAKE_SIZE+1];
char strReceiv[HANDSHAKE_SIZE*2+1];
memset(strSend, 3, sizeof(strSend));
int n = send(g_socket, strSend, HANDSHAKE_SIZE+1, NO_FLAGS_SET);
printf("sned1 = %d\n",n);  
n = recv(g_socket, strReceiv, sizeof(strReceiv), NO_FLAGS_SET); 
printf("recv1 = %d\n",n);  
while(n<sizeof(strReceiv))
{
int nRecive = recv(g_socket, strReceiv+n, sizeof(strReceiv)-n, NO_FLAGS_SET);
n +=   nRecive ; 
printf("recv add = %d\n",n); 
}
printf("recv2 = %d\n",n ); 
n = send(g_socket,strReceiv+1,HANDSHAKE_SIZE,NO_FLAGS_SET);
printf("sned2 = %d\n",n);  
if (n != HANDSHAKE_SIZE)
{
printf("Handshake Failue.\n");
return FALSE;
}
else
{
printf("Handshake Ok.\n");
return TRUE;
}
}

int main()
{
Connect("127.0.0.1","mediaserver",1935);//FMS2服务器127.0.0.1
Handshake();
getchar();

return 0;
}













http://hi.baidu.com/cjmxp/blog/item/105573f045229ecb7931aa53.html


RTMP协议封包分析 参考red5
2009年03月20日 星期五 18:57
原创
RTMP协议封包 参考Red5
RTMP协议封包 由一个包头和一个包体组成,包头可以是4种长度的任意一种:12, 8, 4, 1 byte(s).完整的RTMP包头应该是12bytes,包含了时间戳,AMFSize,AMFType,StreamID信息, 8字节的包头只纪录 了时间戳,AMFSize,AMFType,其他字节的包头纪录信息依次类推 。包体最大长度默认为128字节,通过chunkSize可改变包体最大长 度,通常当一段AFM数据超过128字节后,超过128的部分就放到了其他的RTMP封包中,包头为一个字节.
完整的12字节RTMP包头每个字节的含义:
用途	大小(Byte)	含义
Head_Type	1	包头
TiMMER	3	时间戳
AMFSize	3	数据大小
AMFType	1	数据类型
StreamID	4	流ID
一、Head_Type
第一个字节Head_Type的前两个Bit决定了包头的长度.它可以用掩码0xC0进行"与"计算: 
Head_Type的前两个Bit和长度对应关系：
Bits	Header Length
00	12 bytes
01	8 bytes
10	4 bytes
11	1 byte
Head_Type的后面6个Bit和StreamID决定了ChannelID。   StreamID和ChannelID对应关系：StreamID=(ChannelID-4)/5+1 参考red5
ChannelID	Use
02	Ping 和ByteRead通道
03	Invoke通道 我们的connect() publish()和自字写的NetConnection.Call() 数据都是在这个通道的
04	Audio和Vidio通道
05 06 07	服务器保留,经观察FMS2用这些Channel也用来发送音频或视频数据

二、TiMMER
TiMMER占3个字节纪录的是时间戳,音视频流的时间戳是统一排的。可分为绝对时间戳和相对时间戳。
fms对于同一个流，发布的时间戳接受的时间戳是有区别的
publish时间戳,采用相对时间戳，时间戳值等于当前媒体包的绝对时间戳与上个媒体包（不区分音视频）的绝对时间戳之间的差距，单位毫秒。
play时间戳，相对时间戳，时间戳值等于当前媒体包的绝对时间戳与上个同类型媒体包（视频对应视频，音频对应音频）的绝对时间戳之间的差距，单位毫秒。
flv格式文件时间戳，绝对时间戳，时间戳长度3个字节。超过0xFFFFFF后时间戳值等于TimeStamp & 0xFFFFFF。
flv格式文件影片总时间长度保存在onMetaData的duration属性里面，长度为8个字节，是一个翻转的double类型。

三、AMFSize
AMFSize占三个字节，这个长度是AMF长度，可超过RTMP包的最大长度128字节。如果超过了128字节，那么由多个后续RTMP封包组合，每个后续RTMP封包的头只占一个字节。一般就是以0xC？开头。

四、AMFType
AMFSize占三个字节，这个长度是AMF长度，可超过RTMP包的最大长度128字节。
AMFType是包的类型
0×01	Chunk Size	changes the chunk size for packets
0×02	Unknown	
0×03	Bytes Read	send every x bytes read by both sides
0×04	Ping	ping is a stream control message, has subtypes
0×05	Server BW	the servers downstream bw
0×06	Client BW	the clients upstream bw
0×07	Unknown	
0×08	Audio Data	packet containing audio
0×09	Video Data	packet containing video data
0x0A-0x0E	Unknown	
0x0F	FLEX_STREAM_SEND	TYPE_FLEX_STREAM_SEND
0x10	FLEX_SHARED_OBJECT	TYPE_FLEX_SHARED_OBJECT
0x11	FLEX_MESSAGE	TYPE_FLEX_MESSAGE
0×12	Notify	an invoke which does not expect a reply
0×13	Shared Object	has subtypes
0×14	Invoke	like remoting call, used for stream actions too.
0×16	StreamData	这是FMS3出来后新增的数据类型,这种类型数据中包含AudioData和VideoData

五、StreamID
StreamID是音视频流的ID,如果AMFType!=0x08 或!=0x09那么 StreamID为0。
ChannelID 和StreamID之间的计算公式：StreamID=(ChannelID-4)/5+1 参考red5
例如当ChannelID为2、3、4时StreamID都为1 当ChannelID为9的时候StreamID为2

六、封包分析
例如有一个RTMP封包的数据03 00 00 00 00 01 02 14 00 00 00 00 02 00 07 63 6F 6E 6E 65 63 74 00 3F F0 00 00 00 00 00 00 08 ，，，
数据依次解析的含义 
03表示12字节头，channelid=3
000000表示Timmer=0
000102表示AMFSize=18
14表示AMFType=Invoke 方法调用
00 00 00 00 表示StreamID = 0
//到此,12字节RTMP头结束下面的是AMF数据分析,具体的AMF0数据格式请参考 http://www.cnweblog.com/fly2700/archive/2008/04/09/281432.html
02表示String
0007表示String长度7
63 6F 6E 6E 65 63 74 是String的Ascall值"connect"
00表示Double
3F F0 00 00 00 00 00 00 表示double的0.0
08表示Map数据开始

转自：http://www.cnweblog.com/fly2700/archive/2008/04/09/281431.html


http://www.cnweblog.com/fly2700/archive/2008/04/09/281431.html











http://bbs.9ria.com/thread-10560-1-1.html

import java.net.*;
import java.io.*;
public class server {

        public static void main(String[] args) throws Exception {
                File f = new File("e:/data");
                FileOutputStream outf = new FileOutputStream(f);
                ServerSocket ss = new ServerSocket(1935);
                Socket s = ss.accept();
                DataInputStream dis = new DataInputStream(s.getInputStream());
                DataOutputStream outs = new DataOutputStream(s.getOutputStream());
                byte bt[][] = new byte[3][1536]; 
                byte b2[] = new byte[1536];
                int i = 0;
                        try{
                          dis.skipBytes(1);
                            while(true){
                                if(i==3)break;
                                    dis.read(bt[i]);
                                    if(i==0){
                                    outs.write(0x03);
                                    outs.flush();
                                    outs.write(b2);
                                    outs.flush();
                                    outs.write(bt[0]);
                                    outs.flush();
                                    }
                                i++;
                                
                            }
                           
                        }catch(EOFException e){
                            System.out.print(e);
                        }catch(IOException e){
                                System.out.println("客户端关闭");
                                dis.close();
                                s.close();
                                ss.close();
                                outs.close();
                        }
                 outf.write(bt[0]);
                 outf.flush();
                 outf.write(bt[1]);
                 outf.flush();
                 outf.write(bt[2]);
                 outf.flush();
                 outf.close();
                
        }

}



var cn:NetConnection = new NetConnection();
cn.connect("rtmp:/127.0.0.1");
cn.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
cn.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    txt.text="连接成功!";
                    break;
                                case "NetConnection.Connect.Closed":
                                        txt.text="关闭连接";
                                        break;
                                case "NetConnection.Connect.Failed":
                                        txt.text="连接失败!";
                                        break;
                case "NetStream.Play.StreamNotFound":
                    trace("无法找到远程主机");
                    break;
            }
}

function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("链接失败错误: " + event);
}



http://www.adobe.com/aboutadobe/pressroom/pressreleases/200901/012009RTMP.html














http://www.xtesco.com/bbs/forum.php?mod=viewthread&tid=21&page=1


实现fms服务器,rtmp协议破解
楼主
 发表于 2010-8-13 13:55 | 只看该作者 | 倒序看帖 | 打印

Experience:
从月中的关于服务器推技术的思考，发现无论是长轮询还是早期的web页面技术都不能很好的实现Comet.要真正彻底的实现服务器推，必须采用socket,富媒体技术现在只有唯一的选择Flash,虽然Silverlight表现出强劲的势头，但这不会是个简单的过程。

20号之前实现了基于xmlsocket的长连接中间件，通过js操作，全程传递json流。达到了不错的效果。不过问题也是显而易见的，就是flash和js的交互实在是太慢了，不能达到webgame级别的所需要的要求。

随后开始研究rtmp协议，flash的fms服务器实在太贵了，而rtmp协议又不是开放协议，国外有个red5项目能实现大部分功能，国内还刚刚起步，只有零零散散地几篇文章。而C#版本的更是少有发现，经过几天对rtmp协议资料的整理和分析，已经有所眉目，随后将不断放出.

那么就开始吧.


1、什么是rtmp:
RTMP（the Real-time Messaging Protocol）协议作为客户端和服务器端的传输协议，这是一个专门为高效传输视频、音频和数据而设计的 TCP/IP 协议，使用 RTMP 协议传输的数据是未经加密的，包括用户名和密码等认证信息。

2、rtmp协议的应用:
现在最主要的就是在视频流这块，youtube,tudou等等都是经典案例。但是因为fms服务器的价格实在让人难以接受，所以中小型企业部署应该还是需要考虑下成本的。

3、red5项目：
red5是一个java的开源项目，通过对rtmp数据包的逆向工程研究，得出了协议的很多细节。他是全球无数开源人的心血结晶。

下面开始详细分析rtmp协议。
rtmp作为一个流媒体协议，必须拥有高度的实时性，而我们知道基于tcp的流始终是单线的，不能真正意义上的并发发送视频和音频包。rtmp协议通过频道的概念进行分包，每128字节为块，因为包片很短，所以不停的切换，根据时间戳同步，就能实现多流并发播放。

rmtp协议由3部分组成:
[协议头]，[协议体]，[协议数据]
协议头,1byte
其中前两位标示协议头长，它可能为以下的四种组合
0x00 -->头长12,完整头，标示新流
0x01 -->头长8
0x10 -->头长4
0x11 -->头长1
(注，此处头长包括此头本身）
后六位表示流的全局唯一id,red5将其理解为channel,因为有时音频和视频数据会同时传递，所以不同的流是可以交替的。最大同步流可能64.

一个完整的协议体(包括头)，应该是12byte长
1 2 3 4 5 6 7 8 9 10 11 12
其中1号位的解释见上
2-4号位 unknow,据red5解释，其为时间相关。
5-7号位 标示了AMF体的长度，就是协议数据的长度。这儿需要说明下，流体最大为128的chunk,如果大于这个数值，将会被分包，但是有且仅有一个12位完整头描述了完整体的大小。
8号位 AMF对象类型,它可能为以下所示:
0×01 Chunk Size changes the chunk size for packets 
0×02 Unknown anyone know this one? 
0×03 Bytes Read send every x bytes read by both sides 
0×04 Ping ping is a stream control message, has subtypes 
0×05 Server BW the servers downstream bw 
0×06 Client BW the clients upstream bw 
0×07 Unknown anyone know this one? 
0×08 Audio Data packet containing audio 
0×09 Video Data packet containing video data 
0x0A - 0×11 Unknown anyone know? 
0×12 Notify an invoke which does not expect a reply 
0×13 Shared Object has subtypes 
0×14 Invoke like remoting call, used for stream actions too. 
0x0A - 0×11 Unknown anyone know? 
0×12 Notify an invoke which does not expect a reply 
0×13 Shared Object has subtypes 
0×14 Invoke like remoting call, used for stream actions too. 
9-12号位定义了流的频道号,此处应该反转后获取 

常用AMF解码
此AMF解码为AMF2.0版本的
整个rtmp协议数据都是AMF格式的，且连续放置，此处理过程应该在包完全接受后处理。
第一个字节标示数据类型:
0x00 - AS Number
0x01 - AS Boolean
0x02 - AS String
0x03 - AS Object
0x05 - AS null
0x06 - AS undefined
0x07 - AS reference
0x08 - AS mixed array
0x09 - AS Object end
0x0A - AS indexed array
0x0C - AS Long String

0x00,数字
8byte
as是遵循ECMA标准的，语法和js很像，数字不分int,float,double,统一为number.
实际存储为8字节的double类型(注，所有数据都是按照big-endian大端字节序来存储的)

0x01,布尔值
1byte,0->false,1->true

0x02,字符串
2 byte:标示此字符串的长度n
n byte:随后跟此长度的字串内容.

0x03,对象
以3字节0x00,0x00,0x09结尾的一段哈希表
其中Key必须为string类型,标示property
其中Value类型可以为任意上述类型。

0x05,Null值

0x06,Undefined值

0x07,引用
2byte 标示先前引用对象Id.

0x08,ECMA数组
以3字节0x00,0x00,0x09结尾的一段ECMA数组
4byte，数组元素个数
随后Key类型必须为String类型,0x02
随后Value类型可为上述任意类型

0x09,end标示
见0x03;0x08所述

0x0a,数组
以3字节0x00,0x00,0x09结尾的一段数组
4byte，数组元素个数
只有Value类型，可为上述任意类型

0x0c,长字符串
4 byte,标示此字符串长度n
n byte,字符串内容 

常用函数call及回应格式
1、connect
请求:
connect invokeid object
a)object标示一系列客户端信息以及版本号等
回应:
_result invokeid null object
a)此invokeid与请求invokeid一致
b)object标示标准回应信息{level,code,de[url=]script[/url]ion}

2、createStream
请求:
createStream invokeid null
回应
_result invokeid null streamid
a)此invokeid与请求invokeid一致
b)streamid为全局唯一流id.通过自增实现,从1开始

3、publish
请求:
publish invokeid(0) null name type
a)此处invokeid为0,未知
b)最后两个参数指示流名称以及类型(live等)
回应:
onStatus invokeid(0) null object
a)invokeid一致
b)object标示一系列消息{level,code,de[url=]script[/url]ion,clientid}
c)clientid指示客户端唯一id号
d)此回应头的flvchannel为入包的flvchannel
e)此回应头的channel号无所谓，测试为4

附上从连接到publish数据包
1,C->S,连接
0080:                                03 00 00 00 00 01 ................
0090:  9B 14 00 00 00 00 02 00 07 63 6F 6E 6E 65 63 74 .........connect
00A0:  00 3F F0 00 00 00 00 00 00 03 00 03 61 70 70 02 .?..........app.
00B0:  00 05 35 32 6E 74 75 00 08 66 6C 61 73 68 56 65 ..52ntu..flashVe
00C0:  72 02 00 0D 57 49 4E 20 39 2C 30 2C 31 32 34 2C r...WIN 9,0,124,
00D0:  30 00 06 73 77 66 55 72 6C 02 00 53 66 69 6C 65 0..swfUrl..Sfile
00E0:  3A 2F 2F 2F 43 3A 2F 44 6F 63 75 6D 65 6E 74 73 :///C:/Documents
00F0:  25 32 30 61 6E 64 25 32 30 53 65 74 74 69 6E 67 %20and%20Setting
0100:  73 2F 67 6F 6E 67 78 69 61 6F 68 75 2F E6 A1 8C s/gongxiaohu/...
0110:  E9 9D A2 2F 41 53 C3 33 2F 74 65 73 74 2F 62 69 .../AS.3/test/bi
0120:  6E 2D 64 65 62 75 67 2F 74 65 73 74 2E 73 77 66 n-debug/test.swf
0130:  00 05 74 63 55 72 6C 02 00 19 72 74 6D 70 3A 2F ..tcUrl...rtmp:/
0140:  2F 36 31 2E 31 35 35 2E 38 2E 32 32 30 2F 35 32 /61.155.8.220/52
0150:  6E 74 75 00 04 66 70 61 64 01 00 00 0C 63 61 70 ntu..fpad....cap
0160:  61 62 69 6C 69 74 69 65 73 00 40 2E 00 00 00 00 abilities.@.....
0170:  00 00 00 0B 61 75 64 69 6F 43 6F 64 65 63 73 00 ....audioCodecs.
0180:  40 99 9C 00 00 00 00 00 00 0B 76 69 64 65 6F 43 @.........videoC
0190:  6F 64 65 63 73 00 40 C3 6F 80 00 00 00 00 00 00 [url=]odecs.@.o[/url].......
01A0:  0D 76 69 64 65 6F 46 75 6E 63 74 69 6F 6E 00 3F .videoFunction.?
01B0:  F0 00 00 00 00 00 00 00 07 70 61 67 65 55 72 6C .........pageUrl
01C0:  02 00 54 66 69 6C 65 3A 2F 2F 2F 43 3A 2F 44 6F ..Tfile:///C:/Do
01D0:  63 75 6D 65 6E 74 73 25 32 30 61 6E 64 25 32 30 cuments%20and%20
01E0:  53 65 74 74 69 6E 67 73 2F 67 6F 6E 67 78 69 61 Settings/gongxia
01F0:  6F 68 75 2F E6 A1 8C E9 9D A2 2F 41 53 33 2F 74 ohu/....../AS3/t
0200:  65 73 74 2F 62 69 6E 2D 64 65 62 75 67 2F 74 65 est/bin-debug/te
0210:  73 74 2E 68 74 6D 6C 00 C3 0E 6F 62 6A 65 63 74 st.html...object
0220:  45 6E 63 6F 64 69 6E 67 00 00 00 00 00 00 00 00 Encoding........
0230:  00 00 00 09
头:[12|3],[时间戳0],[长度n],[类型invoke],[媒体频道0]
内容:connect invokeid object,一系列参数
2、S->C,BW(BandWidth??)
0030:                    02 00 00 00 00 00 04 05 00 00 ................
0040:  00 00 00 13 12 D0 02 00 00 00 00 00 05 06 00 00 ................
0050:  00 00 00 13 12 D0 02 02 00 00 00 00 00 0E 04 00 ................
0060:  00 00 00 00 08 00 00 00 00 00 00 00 01 07 FB 41 ...............A
0070:  50                                              P
头[12|2],[时间戳0],[长度4],[类型Server down],[媒体频道0]
内容:00 13 12 D0
头[12|2],[时间戳0],[长度5],[类型Client up  ],[媒体频道0]
内容:00 13 12 D0 02
头[12|2],[时间戳0],[长度14],[类型Server down],[媒体频道0]
内容:00 08 00 00 00 00 00 00 00 01 07 FB 41 50
3、C->S,BW(BandWidth??)
0030:                    02 8D 35 45 00 00 04 05 00 00 ........5E......
0040:  00 00 00 13 12 D0                              ......
头:[12|2],[时间戳8D 35 45],[长度4],[类型Server down],[媒体频道0]
内容:00 13 12 D0
4、S->C,回应连接
0040:                          03 00 00 00 00 00 73 14 ..............s.
0050:  00 00 00 00 02 00 07 5F 72 65 73 75 6C 74 00 3F ......._result.?
0060:  F0 00 00 00 00 00 00 05 03 00 05 6C 65 76 65 6C ...........level
0070:  02 00 06 73 74 61 74 75 73 00 04 63 6F 64 65 02 ...status..code.
0080:  00 1D 4E 65 74 43 6F 6E 6E 65 63 74 69 6F 6E 2E ..NetConnection.
0090:  43 6F 6E 6E 65 63 74 2E 53 75 63 63 65 73 73 00 Connect.Success.
00A0:  0B 64 65 73 63 72 69 70 74 69 6F 6E 02 00 15 43 .de[url=][url=]script[/url][/url]ion...C
00B0:  6F 6E 6E 65 63 74 69 6F 6E 20 73 75 63 63 65 65 onnection succee
00C0:  64 65 64 2E 00 00 09                            ded....
头:[12|3],[时间戳0],[长度n],[类型invoke],[媒体频道0]
内容:_result invokeid null object,一系列参数
5、C->S,建立流
0030:                    03 00 08 15 00 00 19 14 00 00 ...s............
0040:  00 00 02 00 0C 63 72 65 61 74 65 53 74 72 65 61 .....createStrea
0050:  6D 00 40 00 00 00 00 00 00 00 05                m.@........
头:[12|3],[时间戳00 08 15],[长度19],[类型invoke],[媒体频道0]
内容:createStream invokeid null
6、S->C,回应建立流
0030:                    03 00 00 00 00 00 1D 14 00 00 ................
0040:  00 00 02 00 07 5F 72 65 73 75 6C 74 00 40 00 00 ....._result.@..
0050:  00 00 00 00 00 05 00 3F F0 00 00 00 00 00 00    .......?.......
头:[12|3],[时间戳],[长度1D],[类型invoke],[媒体频道0]
内容:_result invokeid null flvchannel->(double)3F F0
7、C->S,发布流
0040:                          08 00 08 16 00 00 22 14 ..............".
0050:  01 00 00 00 02 00 07 70 75 62 6C 69 73 68 00 00 .......publish..
0060:  00 00 00 00 00 00 00 05 02 00 04 6D 79 74 68 02 ...........myth.
0070:  00 04 6C 69 76 65                              ..live
头:[12|8],[时间戳00 08 16],[长度22],[类型invoke],[媒体频道01 00 00 00]
内容:publish invokeid(0) null myth live,注，最后分别是发布号和发布类型
8、S->C,回应发布流
0040:                          04 00 00 00 00 00 82 14 ................
0050:  01 00 00 00 02 00 08 6F 6E 53 74 61 74 75 73 00 .......onStatus.
0060:  00 00 00 00 00 00 00 00 05 03 00 05 6C 65 76 65 ............leve
0070:  6C 02 00 06 73 74 61 74 75 73 00 04 63 6F 64 65 l...status..code
0080:  02 00 17 4E 65 74 53 74 72 65 61 6D 2E 50 75 62 ...NetStream.Pub
0090:  6C 69 73 68 2E 53 74 61 72 74 00 0B 64 65 73 63 lish.Start..desc
00A0:  72 69 70 74 69 6F 6E 02 00 16 6D 79 74 68 20 69 ription...myth i
00B0:  73 20 6E 6F 77 20 70 75 62 6C 69 73 68 65 64 2E s now published.
00C0:  00 08 63 6C 69 65 6E 74 69 64 00 41 9F ED 05 40 ..clientid.A...@
00D0:  00 00 00 00 C4 00 09                            .......
头:[12|4],[时间戳0],[长度82],[类型invoke],[媒体频道01 00 00 00]
内容nStatus invokeid(0) null object->一系列参数 clientid=00 41 9F ED 05 40 00 00
9、C->S,发数据包,video data
头:[12|6],[时间戳00 08 16],[长度n],[类型videodata],[媒体频道01 00 00 00] 












http://bbs.9ria.com/viewthread.php?tid=8959

