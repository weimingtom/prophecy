package com.ugame.prophecy.protocol.rtmp;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * 
 * @see http://jessewarden.com/2006/07/porting-flashcom-applications-to-actionscript-3.html
 * @see http://www.adobe.com/devnet/flashplayer/articles/hd_video_flash_player.html
 */
public class SimpleRTMPServer {
    private static byte[] S0 = new byte[0xC01];
    static {
	S0[0] = 0x03;
    }
    
    private static final byte[] ClientBW = {
	0x02, 
	0x00, 0x00, 0x00, 
	0x00, 0x00, 0x05, 
	0x06, 
	0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, (byte) 0xFA, 0x00, 0x00    
    };
    
    private static final byte[] Ping = {
	0x42, 
	0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 
	0x04, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
        
    private static final byte[] connectResult = {
	0x03, 
	0x00, 0x00, 0x00, 
	0x00, 0x00, (byte) 0xA1, 
	0x14, 
	0x00, 0x00, 0x00, 0x00, 
	
	0x02, 
	0x00, 0x07, 
	0x5F, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 
	0x00, 
	0x3F, (byte) 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x05,
	
	0x03, 
	
	0x00, 0x05, 
	0x6C, 0x65, 0x76, 0x65, 0x6C, 
	0x02, 
	0x00, 0x06, 
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 
	
	0x00, 0x04, 
	0x63, 0x6F, 0x64, 0x65, 
	0x02, 
	0x00, 0x1D, 
	0x4E, 0x65, 0x74, 0x43, 0x6F, 0x6E, 0x6E, 
	0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 
	0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 
	0x2E, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 
	0x73, 
	
	0x00, 0x0B, 
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 
	0x02, 
	0x00, 0x15, 
	0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 
	0x65, 0x64, 0x2E, 
	
	0x00, 0x0C, 
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6C, 0x69, 0x74, 0x69, 0x65, 0x73, 
	0x00, 
	0x40, 
	(byte) 0xC3, //子包开始
	0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	
	0x00, 0x06, 
	0x66, 0x6D, 0x73, 0x56, 0x65, 0x72, 
	0x02, 
	0x00, 0x0C, 
	0x52, 0x45, 0x44, 0x35, 0x2F, 0x30, 0x2C, 0x39, 0x2C, 0x31, 0x2C, 0x30, 
	
	0x00, 0x00, 
	0x09
    };
    
    private static final byte[] BytesRead = {
	0x42, 
	0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 
	0x03, 
	0x00, 0x00, 0x0D, 0x0A
    };
    
    private static final byte[] callResult = {
	0x43, 
	0x00, 0x00, 0x00, 
	0x00, 0x00, 0x2A, 
	0x14, 
	
	0x02, 
	0x00, 0x07, 
	0x5F, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 
	
	0x00, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
	0x05, 
	
	0x03, 
	
	0x00, 0x01, 
	0x62, 
	0x02, 
	0x00, 0x03, 
	0x62, 0x61, 0x72, 
	
	0x00, 0x01, 
	0x61, 
	0x02, 
	0x00, 0x03, 
	0x66, 0x6F, 0x6F, 
	
	0x00, 0x00, 
	0x09
    };
    
    public static void main(String[] args) throws IOException {
	ServerSocket ss = new ServerSocket(1935);
	System.out.println("Listen on port 1935");
	while (true) {
        	Socket s = ss.accept();
        	DataInputStream dis = new DataInputStream(s.getInputStream());
        	DataOutputStream outs = new DataOutputStream(s.getOutputStream());
        	byte[] bytes = new byte[0xC01];
        	int i = 0;
        	try {
        	    while (true) {
        		if (i == 4) { 
        		    System.out.println("server reset");
        		    break;
        		}
        		int num = dis.read(bytes); 
        		System.out.println(i + ":" + num + " bytes");
        		
        		if (i == 0) {
        		    outs.write(S0); //谜之字节码
        		    outs.flush();
        		} else if(i == 1) {
        		    outs.write(ClientBW);
        		    outs.flush(); 
        		} else if(i == 2) {
        		    outs.write(Ping);
        		    outs.flush(); 
        		    outs.write(connectResult);
        		    outs.flush(); 
        		    outs.write(BytesRead);
        		    outs.flush(); 
        		} else if(i == 3) {
        		    outs.write(callResult);
        		    outs.flush();
        		}
        		i++;
        	    }
        	} catch (EOFException e) {
        	    e.printStackTrace();
        	} catch (IOException e) {
        	    e.printStackTrace();
        	} finally{
        	    dis.close();
        	    s.close();
        	    outs.close();
        	}
	}
    }
}
